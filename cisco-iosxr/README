1. Introduction
---------------

   This document describes the NED for Cisco IOS-XR devices.

   The NED connects to the device CLI using either SSH or Telnet.
   Configuration is done by sending native CLI commands to the
   device through the communication channel.


2. Getting started
------------------

   Set up the environment in $DIR, change DIR to something suitable

     > tar xvzf ned-cisco-iosxr.tgz
     > mv ned-cisco-iosxr $NCS_DIR/packages/neds/

     > export DIR=/tmp/ncs-cisco-iosxr
     > ncs-setup --ned-package $NCS_DIR/packages/neds/cisco-iosxr --dest $DIR
     > cd $DIR

   Start ncs:
     > ncs

   Start NCS CLI:
     > ncs_cli -C -u admin


3. Configure device in NCS
--------------------------

   In the NCS CLI configure the device. Enter configuration mode:
     # configure

   Set the required configurables, address, remote user data including
   remote secondary password, if needed:
     # devices device xrdev address <device address>
     # devices device xrdev device-type cli ned-id cisco-ios-xr
     # devices device xrdev state admin-state unlocked

   Set port and protocol:
     # devices device xrdev port <typically 22 or 23>
     # devices device xrdev device-type cli protocol <telnet or ssh>

   Set authgroup:
     # devices authgroups group auth-groupname umap admin remote-name <login username>
     # devices authgroups group auth-groupname umap admin remote-password <login password>
     # devices device xrdev authgroup auth-groupname
     # commit

   Optional connection parameters (number of retries and time between each):
     # devices device xrdev ned-settings cisco-iosxr-connection-settings number-of-retries 2
     # devices device xrdev ned-settings cisco-iosxr-connection-settings time-between-retry 3

   Optional debug and trace configurables:

     Make the NED dump allCLI messages sent to/from the XR device
     # devices global-settings trace raw
     # commit

     Make the NED print debug log messages
     # java-vm java-logging logger com.tailf.packages.ned.iosxr level level-debug
     # commit

   Exit configure mode:
     # exit

   Try to connect to the device:
     # devices device xrdev connect

   Read the configuration from the device:
     # devices device xrdev sync-from

   Look at the configuration:
     # show running-config devices device xrdev


4. Sample Device Configuration
------------------------------

   For instance, create a second Loopback interface that is down:

   admin@ncs(config)# devices device xrdev config
   admin@ncs(config-config)# interface Loopback 1
   admin@ncs(config-if)# ip address 128.0.0.1 255.0.0.0
   admin@ncs(config-if)# shutdown

   See what you are about to commit:

   admin@ncs(config-if)# commit dry-run outformat native
   device xrdev
     interface Loopback1
      ip address 128.0.0.1 255.0.0.0
      shutdown
     exit

   Commit new configuration in a transaction:

   admin@ncs(config-if)# commit
   Commit complete.

   Verify that NCS is in-sync with the device:

    admin@ncs(config-if)# devices device xrdev check-sync
    result in-sync

   Compare configuration between device and NCS:

    admin@ncs(config-if)# devices device xrdev compare-config
    admin@ncs(config-if)#

   Note: if no diff is shown, supported config is the same in
         NCS as on the device.


5. Configure the NED - ned-settings
-----------------------------------

  The cisco-iosxr NED behaviour can be configured using the
  cisco-iosxr- ned-settings config, located in three different
  locations; global, profile and device specific:

  /ncs:devices/global-settings/ned-settings/
  /ncs:devices/ncs:profiles/profile:cisco-ios/ned-settings/
  /ncs:/device/devices/device:<dev name>/ned-settings/

  Note: profiles setting overrides global-settings and device settings
  override profile settings, hence the narrowest scope of the setting
  is used.

  Note: if you change a ned-setting you must reconnect to the device,
  i.e. disconnect and connect in order for the new setting to take effect.

  See following sections for information about various ned-settings.


6. Execute native device command
--------------------------------

   The NED has support for all native IOS XR exec commands using the
   devices device live-status exec any command

   To execute a command, run it in NCS exec mode like this:

    admin@ncs# devices device xrdev live-status exec any "show
       running-config interface Loopback0"
    result
    Building configuration...

    Current configuration : 42 bytes
    !
    interface Loopback0
     no ip address
    end

   If the command prompts the user for input you can append the
   answer(s) using '| prompts <answer 1> <answer N>'
   For example:

   devices device xrdev live-status exec any "reload | prompts yes yes"

   An alternative way to pass answer to prompts is using
   ned-settings cisco-iosxr-auto-prompts, which is a way to register
   standard answers to standard questions. Note: auto-prompts are
   checked after '| prompts'. Example settings:

   devices global-settings ned-settings cisco-iosxr-auto-prompts Q1 question "System configuration has been modified" answer "no"
   devices global-settings ned-settings cisco-iosxr-auto-prompts Q2 question "Do you really want to remove these keys" answer "yes"
   devices global-settings ned-settings cisco-iosxr-auto-prompts Q3 question "Press RETURN to continue" answer ENTER

   Note: ENTER means a carriage return + line feed is sent to the device.

7. When connecting through a proxy using SSH or TELNET

   Do as follows to setup to connect to a IOS device that resides
   behind a proxy or terminal server:

   +-----+  A   +-------+   B  +-----+
   | NCS | <--> | proxy | <--> | IOS |
   +-----+      +-------+      +-----+

   Setup connection (A):

   # devices device cisco0 address <proxy address>
   # devices device cisco0 port <proxy port>
   # devices device cisco0 device-type cli protocol <proxy proto - telnet or ssh>
   # devices authgroups group ciscogroup umap admin remote-name <proxy username>
   # devices authgroups group ciscogroup umap admin remote-password <proxy password>
   # devices device cisco0 authgroup ciscogroup

   Setup connection (B):

   Define the type of connection to the device:

   # devices device cisco0 ned-settings cisco-ios-proxy-settings remote-connection <ssh|telnet>

   Define login credentials for the device:

   # devices device cisco0 ned-settings cisco-ios-proxy-settings remote-name <user name on the IOS device>
   # devices device cisco0 ned-settings cisco-ios-proxy-settings remote-password <password on the IOS device>

   Define prompt on proxy server:

   # devices device cisco0 ned-settings cisco-ios-proxy-settings proxy-prompt <prompt pattern on proxy>

   Define address and port of IOS device:

   # devices device cisco0 ned-settings cisco-ios-proxy-settings remote-address <address to the IOS device>
   # devices device cisco0 ned-settings cisco-ios-proxy-settings remote-port <port used on the IOS device>
   # commit

   Complete example config:

   devices authgroups group jump-server default-map remote-name MYUSERNAME remote-password MYPASSWORD
   devices device asr9006 address 1.2.3.4 port 22
   devices device asr9006 authgroup jump-server device-type cli ned-id cisco-ios-xr protocol ssh
   devices device asr9006 connect-timeout 60 read-timeout 120 write-timeout 120
   devices device asr9006 state admin-state unlocked
   devices device asr9006 ned-settings cisco-iosxr-proxy-settings remote-connection telnet
   devices device asr9006 ned-settings cisco-iosxr-proxy-settings proxy-prompt ".*#"
   devices device asr9006 ned-settings cisco-iosxr-proxy-settings remote-address 5.6.7.8
   devices device asr9006 ned-settings cisco-iosxr-proxy-settings remote-port 23
   devices device asr9006 ned-settings cisco-iosxr-proxy-settings remote-name cisco
   devices device asr9006 ned-settings cisco-iosxr-proxy-settings remote-password cisco


8. Example of how to configure an 'EXEC PROXY'
----------------------------------------------

Here is an example of how to configure a device which is accessed
through a local terminal server on port 2023:

devices authgroups group cisco default-map remote-name cisco remote-password cisco
devices device terminal address localhost port 2023
devices device terminal authgroup cisco device-type cli ned-id cisco-ios-xr protocol telnet
devices device terminal connect-timeout 60 read-timeout 120 write-timeout 120
devices device terminal state admin-state unlocked

Here is the actual connect to the device, using 'connect' command:

devices device terminal ned-settings cisco-iosxr-proxy-settings remote-connection exec
devices device terminal ned-settings cisco-iosxr-proxy-settings remote-command "connect 192.168.0.225"
devices device terminal ned-settings cisco-iosxr-proxy-settings remote-prompt "Open"
devices device terminal ned-settings cisco-iosxr-proxy-settings remote-name cisco
devices device terminal ned-settings cisco-iosxr-proxy-settings remote-password cisco


9. Optimizing transaction id calculation
----------------------------------------

  The method to use by the NED for calculating transaction ID is set
  with the cisco-iosxr-transaction-id-method leaf.

  Two methods are supported:

  config-hash  - Calculate MD5 on a snapshot of the entire running
                 config for calculation. (Default)
  commit-list  - Use the configuration commit list time of the latest
                 commit for calculation. (default)"

10. Commit method
-----------------

  The method to use for commit/rollback behaviour is configurable
  using the cisco-iosxr-commit-method ned-setting.

  Two methods supported:

  confirmed
    Use 'commit confirmed' along with a confirming 'commit' when
    transaction is done, utilizing the implict rollback on revert by
    calling 'abort'. This is the default behaviour.

  direct
    When using this method, the NED follows the NCS flow by doing
    'commit' when NCS commits the transaction. If transaction is
    reverted, the NED calls 'rollback configuration last 1' to
    rollback the commit.


11. Config method
-----------------

  The method used to enter configure mode can be configured using the
  cisco-iosxr-config-method setting.

  Two methods are supported:

   exclusive
     Configure exclusively, e.g. 'configure exclusive' (DEFAULT)

  terminal
     Configure from the terminal, e.g. 'configure terminal'


12. Number of lines sent to the device in each chunk.
-----------------------------------------------------

  Number of commands lines in a chunk sent by the NED can be
  configured using the cisco-iosxr-number-of-lines-to-send-in-chunk
  ned-setting.

  A higher number normally result in better performance but will also
  have negative impact on the error handling. The default is 100.


13. Configure additional config warning exceptions
-------------------------------------------------

   After having sent a config command to the device the NED will treat
   the following text replies an an error and abort the transaction:

            error
            aborted
            exceeded
            invalid
            incomplete
            duplicate name
            may not be configured
            should be in range
            is used by
            being used
            cannot be deleted
            bad mask
            failed

   Sometimes a warning may contain any of the words above and will be
   treated as an error. This can be avoided by adding an exception to
   the above rule in the cisco-iosxr-config-warning ned-setting.

   cisco-iosxr-config-warning is a regular expression string list of
   warnings that should also be ignored.

   For example, to add a new warning exception:

     admin@ncs(config)# devices profiles profile cisco-ios ned-settings
         cisco-iosxr-config-warning "XHM .* is using a bad mask"
     admin@ncs(config-profile-cisco-iosxr)# commit
     Commit complete.
     admin@ncs(config-profile-cisco-iosxr)# devices device xrdev disconnect
     admin@ncs(config-profile-cisco-iosxr)# devices device xrdev connect
     result true
     info (admin) Connected to xrdev

   Note that in order for the warning exception to take effect, you
   must disconnect and connect again.

14. END OF README FILE
----------------------
